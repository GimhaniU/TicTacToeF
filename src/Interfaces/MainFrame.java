/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Controllers.TicTacController;
import Controllers.PlayerController;
import Models.NetworkPlayer;
import Models.Player;
import db_utilities.DBConnection;
import db_utilities.DBHandler;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.io.File;
import java.sql.SQLException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

/**
 *
 * @author DinsuG
 */
public class MainFrame extends javax.swing.JFrame implements Runnable {

    static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(MainFrame.class.getName());
    private boolean turn;
    private int turn_count;
    private ImageIcon image1;
    private ImageIcon image2;
    JButton[] buttonset = new JButton[9];
    private Player player1;
    private Player player2;
    int playing_mode = 0;   //0-1player, 1-twoplayersame , 2-serverclient
    private int playing_type;

    //for networkplayer
    private String[] matrix = new String[9];
    NetworkPlayer network_player;
    int position = 0;
    Thread thread;

    public MainFrame() {
        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        turn_count = 0;
        image1 = new ImageIcon(getClass().getResource("/Pictures/gold_x.png"));
        image2 = new ImageIcon(getClass().getResource("/Pictures/red_o.png"));
        setImages();
        labelA.setIcon(image1);
        labelB.setIcon(image2);
        this.setLocationRelativeTo(null);
        setResizable(false);

        //labelController();
        buttonset[0] = this.A1;
        buttonset[1] = this.A2;
        buttonset[2] = this.A3;
        buttonset[3] = this.B1;
        buttonset[4] = this.B2;
        buttonset[5] = this.B3;
        buttonset[6] = this.C1;
        buttonset[7] = this.C2;
        buttonset[8] = this.C3;

    }

    public MainFrame(int playing_mode, int playing_type, Player player1, Player player2) {
        this();
        this.player1 = player1;
        this.player2 = player2;
        this.playing_type = playing_type;
        this.playing_mode = playing_mode;
        //setting images for 2 players
        setImages();
        labelA.setIcon(image1);
        labelB.setIcon(image2);
        nameLabelPlayer2.setText(player2.getName() + ":    " + player2.getWincount());
        nameLabelPlayer1.setText(player1.getName() + ":    " + player1.getWincount());

        labelController();

    }

    //for network network_player
    public MainFrame(String ip, int port) {
        this();
        
        network_player = new NetworkPlayer(ip, port, this);
        this.playing_mode = 2;

        if (!network_player.connect()) {  //if the 1st one who become server
            network_player.initializeServer();
            network_player.setIs_server(true);

        }
        setImages();
        labelA.setIcon(image1);
        if (network_player.isIs_server()) {
            nameLabelPlayer2.setText("You");
            nameLabelPlayer1.setText("Opponent");
        } else {
            nameLabelPlayer2.setText("Opponent");
            nameLabelPlayer1.setText("You");
        }
        labelB.setIcon(image2);
        thread = new Thread(this);
        thread.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        allButtonsGroup = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        labelA = new javax.swing.JLabel();
        labelB = new javax.swing.JLabel();
        nameLabelPlayer2 = new javax.swing.JLabel();
        nameLabelPlayer1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        buttonPanal = new javax.swing.JPanel();
        A1 = new javax.swing.JButton();
        C2 = new javax.swing.JButton();
        C1 = new javax.swing.JButton();
        B2 = new javax.swing.JButton();
        B1 = new javax.swing.JButton();
        A2 = new javax.swing.JButton();
        B3 = new javax.swing.JButton();
        A3 = new javax.swing.JButton();
        C4 = new javax.swing.JButton();
        C3 = new javax.swing.JButton();
        networkMsgLabel = new javax.swing.JLabel();
        homeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chance for", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 1, 12))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        labelA.setText("A");

        labelB.setText("B");

        nameLabelPlayer2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameLabelPlayer2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        nameLabelPlayer1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameLabelPlayer1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelA, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelB, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nameLabelPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                        .addComponent(nameLabelPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabelPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabelPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelA)
                    .addComponent(labelB))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jPanel6.setLayout(null);

        buttonPanal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonPanal.setOpaque(false);

        A1.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        A1.setForeground(new java.awt.Color(0, 255, 255));
        A1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(A1);
        A1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                A1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                A1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                A1MouseExited(evt);
            }
        });
        A1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A1ActionPerformed(evt);
            }
        });

        C2.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        C2.setForeground(new java.awt.Color(0, 255, 255));
        C2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(C2);
        C2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                C2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                C2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                C2MouseExited(evt);
            }
        });

        C1.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        C1.setForeground(new java.awt.Color(0, 255, 255));
        C1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(C1);
        C1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                C1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                C1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                C1MouseExited(evt);
            }
        });

        B2.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        B2.setForeground(new java.awt.Color(0, 255, 255));
        B2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(B2);
        B2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                B2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                B2MouseExited(evt);
            }
        });

        B1.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        B1.setForeground(new java.awt.Color(0, 255, 255));
        B1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(B1);
        B1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                B1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                B1MouseExited(evt);
            }
        });

        A2.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        A2.setForeground(new java.awt.Color(0, 255, 255));
        A2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(A2);
        A2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                A2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                A2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                A2MouseExited(evt);
            }
        });

        B3.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        B3.setForeground(new java.awt.Color(0, 255, 255));
        B3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(B3);
        B3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                B3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                B3MouseExited(evt);
            }
        });

        A3.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        A3.setForeground(new java.awt.Color(0, 255, 255));
        A3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 255, 102), null, null));
        allButtonsGroup.add(A3);
        A3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                A3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                A3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                A3MouseExited(evt);
            }
        });

        C4.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        C4.setForeground(new java.awt.Color(0, 255, 255));
        C4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        allButtonsGroup.add(C4);
        C4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                C4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                C4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                C4MouseExited(evt);
            }
        });

        C3.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        C3.setForeground(new java.awt.Color(0, 255, 255));
        C3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        allButtonsGroup.add(C3);
        C3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                C3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                C3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                C3MouseExited(evt);
            }
        });

        javax.swing.GroupLayout buttonPanalLayout = new javax.swing.GroupLayout(buttonPanal);
        buttonPanal.setLayout(buttonPanalLayout);
        buttonPanalLayout.setHorizontalGroup(
            buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanalLayout.createSequentialGroup()
                        .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buttonPanalLayout.createSequentialGroup()
                        .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(C2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(C3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(buttonPanalLayout.createSequentialGroup()
                        .addGroup(buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(buttonPanalLayout.createSequentialGroup()
                                .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(buttonPanalLayout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addComponent(C4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        buttonPanalLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {A1, A2, A3, B1, B2, B3, C1, C2});

        buttonPanalLayout.setVerticalGroup(
            buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(buttonPanalLayout.createSequentialGroup()
                        .addGroup(buttonPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(C3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(C2, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(C4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonPanalLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {A1, A2, A3, B1, B2, B3, C1, C2});

        jPanel6.add(buttonPanal);
        buttonPanal.setBounds(140, 30, 300, 290);

        networkMsgLabel.setBackground(new java.awt.Color(102, 255, 102));
        networkMsgLabel.setFont(new java.awt.Font("Tempus Sans ITC", 3, 18)); // NOI18N
        networkMsgLabel.setForeground(new java.awt.Color(0, 102, 0));
        networkMsgLabel.setOpaque(true);
        jPanel6.add(networkMsgLabel);
        networkMsgLabel.setBounds(141, 350, 330, 38);

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/home.png"))); // NOI18N
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        jPanel6.add(homeButton);
        homeButton.setBounds(440, 0, 50, 50);

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Back.png"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel6.add(backButton);
        backButton.setBounds(0, 0, 50, 50);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/blackboard - Copy.jpg"))); // NOI18N
        jPanel6.add(jLabel7);
        jLabel7.setBounds(0, 0, 470, 390);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void A1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A1MouseClicked
        position = 0;
        doByPlayerMode(evt);

    }//GEN-LAST:event_A1MouseClicked

    private void A2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A2MouseClicked
        position = 1;
        doByPlayerMode(evt);
    }//GEN-LAST:event_A2MouseClicked

    private void A3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A3MouseClicked
        position = 2;
        doByPlayerMode(evt);
    }//GEN-LAST:event_A3MouseClicked

    private void B1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B1MouseClicked
        position = 3;
        doByPlayerMode(evt);
    }//GEN-LAST:event_B1MouseClicked

    private void B2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B2MouseClicked
        position = 4;
        doByPlayerMode(evt);
    }//GEN-LAST:event_B2MouseClicked

    private void B3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B3MouseClicked
        position = 5;
        doByPlayerMode(evt);
    }//GEN-LAST:event_B3MouseClicked

    private void C1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C1MouseClicked
        position = 6;
        doByPlayerMode(evt);
    }//GEN-LAST:event_C1MouseClicked

    private void C2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C2MouseClicked
        position = 7;
        doByPlayerMode(evt);
    }//GEN-LAST:event_C2MouseClicked

    private void C3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C3MouseClicked
        position = 8;
        doByPlayerMode(evt);
    }//GEN-LAST:event_C3MouseClicked

    private void A1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_A1ActionPerformed

    private void A3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A3MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_A3MouseEntered

    private void A3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A3MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_A3MouseExited


    private void A1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A1MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_A1MouseEntered

    private void A2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A2MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_A2MouseEntered

    private void B1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B1MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_B1MouseEntered

    private void B2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B2MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_B2MouseEntered

    private void B3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B3MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_B3MouseEntered

    private void C1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C1MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_C1MouseEntered

    private void C2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C2MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_C2MouseEntered

    private void C3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C3MouseEntered
        enterButton(evt);
    }//GEN-LAST:event_C3MouseEntered

    private void A1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A1MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_A1MouseExited

    private void A2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A2MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_A2MouseExited

    private void B1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B1MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_B1MouseExited

    private void B2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B2MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_B2MouseExited

    private void B3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B3MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_B3MouseExited

    private void C1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C1MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_C1MouseExited

    private void C2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C2MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_C2MouseExited

    private void C3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C3MouseExited
        leaveButton(evt);
    }//GEN-LAST:event_C3MouseExited

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        new HomePage().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_homeButtonActionPerformed

    private void C4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_C4MouseExited

    private void C4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_C4MouseEntered

    private void C4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_C4MouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new ModeSelector().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int result=JOptionPane.showConfirmDialog(null,"Do you really want to stop here?");
        if(result==JOptionPane.YES_OPTION){
            this.dispose();
            new HomePage().setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing

    //completed random algo
    public void randomClick() {
        Random random = new Random();
        int number = Math.abs(random.nextInt() % 9);
        while (!buttonset[number].isFocusable()) {
            number = Math.abs(random.nextInt() % 9);
        }
        int isWin = selectButton(number);

    }

    //replay
    public void replay() {
        this.dispose();
        new MainFrame(playing_mode, playing_type, player1, player2).setVisible(true);

    }

    //compled main algo
    public boolean checkSuitableClick(Component component, String player, String machine) {
        JButton button = (JButton) component;
        //automated part
        int ar[] = new int[9];

        for (int i = 0; i < 9; i++) {
            if (!buttonset[i].isFocusable() && buttonset[i].getText() == player) {
                ar[i] = 0;
            } else if (!buttonset[i].isFocusable() && buttonset[i].getText() == machine) {
                ar[i] = 1;
            } else {
                ar[i] = 10 + i;
            }
            log.debug("ar[" + i + "] = " + ar[i]);

        }

        L1:
        while (true) {

            // horisontally check 3rd one
            int j = 0;
            while (j < 7) {
                if ((ar[j] == ar[j + 1]) && ar[j] == 0) {
                    if (ar[j + 2] != 1) {
                        selectButton(j + 2);
                        return true;
                    }
                }
                j += 3;

            }
            //horizontally checking middle one
            j = 0;
            while (j < 7) {
                if ((ar[j] == ar[j + 2]) && ar[j] == 0) {
                    if (ar[j + 1] != 1) {
                        selectButton(j + 1);
                        return true;
                    }
                }
                j += 3;

            }

            //horizontally checking first one 
            j = 0;
            while (j < 7) {
                if ((ar[j + 1] == ar[j + 2]) && ar[j + 1] == 0) {
                    if (ar[j] != 1) {
                        selectButton(j);
                        return true;
                    }
                }
                j += 3;

            }
            // verticale checking last one    
            j = 0;
            while (j < 3) {
                if ((ar[j] == ar[j + 3]) && ar[j] == 0) {
                    if (ar[j + 6] != 1) {
                        selectButton(j + 6);
                        return true;
                    }
                }
                j += 1;

            }

            // verticale checking moddle one 
            j = 0;
            while (j < 3) {
                if ((ar[j] == ar[j + 6]) && ar[j] == 0) {
                    if (ar[j + 3] != 1) {
                        selectButton(j + 3);
                        return true;
                    }

                }
                j += 1;
            }
            // verticale checking first one
            j = 0;
            while (j < 3) {
                if ((ar[j + 3] == ar[j + 6]) && ar[j + 3] == 0) {
                    if (ar[j] != 1) {
                        selectButton(j);
                        return true;
                    }
                }
                j += 1;
            }
            //cross checking
            for (j = 0; j < 3; j += 2) {
                if ((ar[j] == ar[4]) && ar[j] == 0) {
                    if (ar[8 - j] != 1) {
                        selectButton(8 - j);
                        return true;
                    }
                } else if ((ar[j] == ar[8 - j]) && ar[j] == 0) {
                    if (ar[4] != 1) {
                        selectButton(4);
                        return true;
                    }
                } else if ((ar[4] == ar[8 - j]) && ar[4] == 0) {
                    if (ar[j] != 1) {
                        selectButton(j);
                        return true;
                    }
                }
            }

            return false;

        }

    }

    //set suitable image for lable
    private void setImages() {
        if (player1 != null) {
            if (player1.getImage() == 1) {

                this.image1 = new ImageIcon(".\\src\\Pictures\\gold_x.png");
                log.debug("player1:gold_X");
            } else if (player1.getImage() == 2) {

                this.image1 = new ImageIcon(getClass().getResource("/Pictures/gold_o.png"));
                log.debug("player1: gold_O");
            } else if (player1.getImage() == 3) {

                this.image1 = new ImageIcon(getClass().getResource("/Pictures/red_x.png"));
                log.debug("player1: red_x");
            } else if (player1.getImage() == 4) {

                this.image1 = new ImageIcon(getClass().getResource("/Pictures/red_o.png"));
                log.debug("player1: red_o");
            }
        }
        if (player2 != null) {
            if (player2.getImage() == 1) {
                this.image2 = new ImageIcon(getClass().getResource("/Pictures/gold_x.png"));
                log.debug("player1: gold_x");
            } else if (player2.getImage() == 2) {
                this.image2 = new ImageIcon(getClass().getResource("/Pictures/gold_o.png"));
                log.debug("player1: gold_o");
            } else if (player2.getImage() == 3) {
                this.image2 = new ImageIcon(getClass().getResource("/Pictures/red_x.png"));
                log.debug("player1: red_x");
            } else if (player2.getImage() == 4) {
                this.image2 = new ImageIcon(".\\src\\Pictures\\red_o.png");
                log.debug("player1: red_o");
            }
        }
        if (network_player != null) {
            // if (network_player.isIs_server()) {
            this.image1 = new ImageIcon(getClass().getResource("/Pictures/gold_o.png"));
            log.debug("net_player: gold_o");
            // } else if (!network_player.isIs_server()) {
            this.image2 = new ImageIcon(getClass().getResource("/Pictures/red_x.png"));
            log.debug("net_player1: red_x");
            // }
        }

    }

    //completed
    public boolean humanPart(Component component) {
        JButton button = (JButton) component;
        if (button.isFocusable()) {
            //human network_player
            button.setIcon(image2);
            button.setText("0");
            button.setFocusable(false);
            turn_count++;
            turn = !turn;
            int checkWin = checkWin();
            if (checkWin == 0) {
                labelController();
                return true;
            } else {
                player1.setCurrentDate();
                player1.setIsWin(checkWin);
                try {
                    PlayerController.addNewPlayer(player1);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return false;
    }

    // machine part hadlle
    public int selectButton(int j) {
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        buttonset[j].setIcon(image1);
        buttonset[j].setText("1");
        buttonset[j].setFocusable(false);
        turn_count++;
        turn = !turn;
        int checkWin = checkWin();
        if (checkWin == 0) {
            labelController();
        } else {
            player1.setCurrentDate();
            if (checkWin == 1) {
                player1.setIsWin(0);
            } else {
                player1.setIsWin(checkWin);
            }
            try {
                PlayerController.addNewPlayer(player1);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return checkWin;
    }

    //to call avoid win algorithm 
    public boolean checkToAvoidWin(Component component) {
        return checkSuitableClick(component, "0", "1");
    }

    //to call check to win algo
    public boolean checkToOwnWin(Component component) {
        return checkSuitableClick(component, "1", "0");
    }

    // hard method
    public void controlOnePlayerGameHard(Component component) {
        boolean humanPart = humanPart(component);
        if (humanPart) {
            boolean checkToOwnWin = checkToOwnWin(component);
            log.debug(checkToOwnWin + "own win");

            if (!checkToOwnWin) {
                boolean checkToAvoidWin = checkToAvoidWin(component);
                System.out.println(checkToAvoidWin);
                if (!checkToAvoidWin) {
                    log.debug("random-hard");
                    randomClick();
                }
            }
        }
    }

    // medium method
    public void controlOnePlayerGameMedium(Component component) {
        boolean humanPart = humanPart(component);
        if (humanPart) {
            boolean checkToAvoidWin = checkToAvoidWin(component);
            log.debug(checkToAvoidWin);
            if (!checkToAvoidWin) {
                log.debug("random-medium");
                randomClick();
            }

        }
    }

    //easy mehod
    public void controlOnePlayerGameEasy(Component component) {
        boolean humanPart = humanPart(component);
        if (humanPart) {
            log.debug("random-easy");
            randomClick();

        }
    }

    //this call suitable mehod when playing button clicking
    private void doByPlayerMode(MouseEvent e) {

        if (playing_mode == 0) {
            TicTacController.playSound(new File(".\\src\\Sounds\\click.wav"));
            if (playing_type == 3) {
                controlOnePlayerGameHard(e.getComponent());
            } else if (playing_type == 2) {
                controlOnePlayerGameMedium(e.getComponent());
            } else if (playing_type == 1) {
                controlOnePlayerGameEasy(e.getComponent());
            }
        } else if (playing_mode == 1) {
            TicTacController.playSound(new File(".\\src\\Sounds\\click.wav"));
            controlTwoPlayerGame(e.getComponent());
        } else if (playing_mode == 2) {
            controlNetworkGame(e);
        }
    }

    //controll one player game 
    public void controlOnePlayerGame(Component component) {
        JButton button = (JButton) component;

        if (button.isFocusable()) {
            if (turn == true) {

                button.setIcon(image1);
                button.setText("0");
                turn_count++;
            } else {

                button.setIcon(image2);
                button.setText("1");
                turn_count++;
            }
            button.setFocusable(false);
            // button.setEnabled(false);

            turn = !turn;
            checkWin();
            labelController();
        }
    }

    //controll two player     
    public void controlTwoPlayerGame(Component component) {

        JButton button = (JButton) component;
        if (button.isFocusable()) {
            if (turn == true) {
                button.setIcon(image1);
                button.setText("0");
                turn_count++;
            } else {
                button.setIcon(image2);
                button.setText("1");
                turn_count++;
            }
            button.setFocusable(false);
            // button.setEnabled(false);
            turn = !turn;

            int checkWin = checkWin();
            if (checkWin == 0) {
                labelController();
                //return true;
            } else {
                if (!turn) {
                    player1.setCurrentDate();
                    player2.setCurrentDate();
                    if (checkWin == 1) {
                        player1.setIsWin(1);
                        player2.setIsWin(0);

                    } else if (checkWin == 2) {
                        player1.setIsWin(2);
                        player2.setIsWin(2);
                    }
                } else if (turn) {
                    player2.setCurrentDate();
                    player1.setCurrentDate();
                    if (checkWin == 1) {
                        player1.setIsWin(0);
                        player2.setIsWin(1);

                    } else if (checkWin == 2) {
                        player1.setIsWin(2);
                        player2.setIsWin(2);
                    }
                }
                try {
                    PlayerController.addNewPlayer(player1);
                    PlayerController.addNewPlayer(player2);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            labelController();
        }
    }

    //controll network player game
    public void controlNetworkGame(MouseEvent e) {

        JButton button = (JButton) e.getComponent();
        if (button.isFocusable()) {
            if (network_player.isIs_server()) {
                button.setIcon(image1);
            } else {
                button.setIcon(image2);
            }
            if (network_player.isYourTurn() == true) {
                network_player.control(position, this);
                
                if (network_player.isWon()) {
                    networkMsgLabel.setText("You won!");

                    int result = JOptionPane.showConfirmDialog(this, "Do you want to continue?", "You Won!", 1);
                    if (result == JOptionPane.YES_OPTION) {
                        network_player.replay(-1, this);
                        networkMsgLabel.setText("");
                    } else {
                        this.dispose();
                        new HomePage().setVisible(true);

                    }
                    
                } else if (network_player.isEnemyWon()) {
                    networkMsgLabel.setText("You lost!");
                    
                    int result = JOptionPane.showConfirmDialog(this, "Do you want to continue?", "You Lost!", 1);
                    if (result == JOptionPane.YES_OPTION) {
                        network_player.replay(-1, this);
                        networkMsgLabel.setText("");
                    } else {
                        this.dispose();
                        new HomePage().setVisible(true);

                    }
                    
                } else if (network_player.isTie()) {
                    networkMsgLabel.setText("No winner!");
                    int result = JOptionPane.showConfirmDialog(this, "Do you want to continue?", "No winner!", 1);
                    if (result == JOptionPane.YES_OPTION) {
                        network_player.replay(-1, this);
                        networkMsgLabel.setText("");
                    } else {
                        this.dispose();
                        new HomePage().setVisible(true);

                    }
                }
            }
            button.setFocusable(false);
            
        }
        labelController();
    }

    public void addButtonLabel(String[] matrix) {
        for (int i = 0; i < 9; i++) {
            if (matrix[i] == "O") {
                buttonset[i].setIcon(image1);
                buttonset[i].setFocusable(false);
            } else if (matrix[i] == "X") {
                buttonset[i].setIcon(image2);
                buttonset[i].setFocusable(false);
            } else if (matrix[i] == null) {
                buttonset[i].setIcon(null);
                buttonset[i].setFocusable(true);
            }
        }
    }

    // select suitable lable for next click
    public void labelController() {
        if (playing_mode == 1) {
            if (turn) {
                labelA.setBorder(new LineBorder(Color.BLACK));
                labelB.setBorder(new LineBorder(Color.WHITE));
            } else {
                labelB.setBorder(new LineBorder(Color.BLACK));
                labelA.setBorder(new LineBorder(Color.WHITE));
            }
        } else if (playing_mode == 2) {
            if (network_player.isYourTurn() && network_player.isIs_server()) {
                labelA.setBorder(new LineBorder(Color.BLACK));
                labelB.setBorder(new LineBorder(Color.WHITE));
            } else if (network_player.isYourTurn() && !network_player.isIs_server()){
                labelB.setBorder(new LineBorder(Color.BLACK));
                labelA.setBorder(new LineBorder(Color.WHITE));
            }
        }
    }

    //find winner name
    public String findWinner() {
        if (turn == false) {
            return player2.getName();
        }
        return player1.getName();

    }

    //go back 
    public void newGame() {
        new ModeSelector().setVisible(true);
        this.setVisible(false);

    }

    //complite
    public int checkWin() {
        if (turn_count <= 9) {
            if ((A1.getText() == A2.getText()) && (A2.getText() == A3.getText()) && (A1.getText() != "")) {
                return showWinner();
            } else if ((B1.getText() == B2.getText()) && (B2.getText() == B3.getText()) && (B1.getText() != "")) {
                return showWinner();
            } else if ((C1.getText() == C2.getText()) && (C2.getText() == C3.getText()) && (C1.getText() != "")) {
                return showWinner();
            } else if ((A1.getText() == B1.getText()) && (B1.getText() == C1.getText()) && (A1.getText() != "")) {
                return showWinner();
            } else if ((A2.getText() == B2.getText()) && (B2.getText() == C2.getText()) && (A2.getText() != "")) {
                return showWinner();
            } else if ((A3.getText() == B3.getText()) && (B3.getText() == C3.getText()) && (A3.getText() != "")) {
                return showWinner();
            } else if ((A1.getText() == B2.getText()) && (B2.getText() == C3.getText()) && (A1.getText() != "")) {
                return showWinner();
            } else if ((A3.getText() == B2.getText()) && (C1.getText() == B2.getText()) && (A3.getText() != "")) {
                return showWinner();
            }
        }
        if (turn_count == 9) {
            int result = JOptionPane.showConfirmDialog(null, "Do you want to continue?", "No winner!", 1);
            if (result == JOptionPane.YES_OPTION) {
                new MainFrame(playing_mode, playing_type, player1, player2).setVisible(true);
            } else if (result == JOptionPane.NO_OPTION) {
                this.dispose();
                new ModeSelector().setVisible(true);
            } else {
                this.dispose();
                new HomePage().setVisible(true);
            }
            //newGame();
            return 2;
        }
        return 0;
    }

    private int showWinner() {
        int result = JOptionPane.showConfirmDialog(null, "Do you want to continue?", findWinner() + " win the match.", 1);
        if (turn == false) {
            player2.setWincount();
            //nameLabelPlayer2.setText(player2.getName()+"\t"+player2.getWincount());
        } else {
            player1.setWincount();
            // nameLabelPlayer1.setText(player1.getName()+"\t"+player1.getWincount());
        }
        TicTacController.playSound(new File(".\\src\\Sounds\\clap.wav"));
        if (result == JOptionPane.YES_OPTION) {
            replay();
        } else if (result == JOptionPane.NO_OPTION) {
            this.dispose();
            new ModeSelector().setVisible(true);
        } else {
            this.dispose();
            new HomePage().setVisible(true);
        }

        return 1;
    }

    public ImageIcon showSymbol() {
        if (playing_mode != 2) {
            if (turn == true) {
                return image1;
            } else {
                return image2;
            }
        } else {
            if (network_player.isIs_server()) {
                return image1;
            }
            return image2;
        }
    }

    private void enterButton(MouseEvent evt) {
        JButton b = (JButton) evt.getComponent();
        if (playing_mode != 2) {
            if (b.isFocusable()) {
                b.setIcon(showSymbol());
            }
        } else {
            if (network_player.isYourTurn()) {
                if (b.isFocusable()) {
                    b.setIcon(showSymbol());
                }
            }
        }
    }

    private void leaveButton(MouseEvent evt) {
        JButton b = (JButton) evt.getComponent();
        if (b.isFocusable()) {
            b.setIcon(null);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new MainFrame().setVisible(true);

            }
        });
    }

    @Override
    public void run() {
        while (true) {
            network_player.tick(this);
            labelController();
            if (network_player.isEnemyWon()) {
                networkMsgLabel.setText("Opponent won");

                int result = JOptionPane.showConfirmDialog(this, "Do you want to continue?", "You Lost!", 1);
                if (result == JOptionPane.YES_OPTION) {
                    network_player.replay(-1, this);
                    networkMsgLabel.setText("");
                } else {
                    this.dispose();
                    new HomePage().setVisible(true);
                    break;
                }

            } else if (network_player.isTie()) {
                networkMsgLabel.setText("No winner");
                int result = JOptionPane.showConfirmDialog(this, "Do you want to continue?", "No winner!", 1);
                if (result == JOptionPane.YES_OPTION) {
                    network_player.replay(-1, this);
                    networkMsgLabel.setText("");
                } else {
                    this.dispose();
                    new HomePage().setVisible(true);
                    break;
                }
            }
            //if a client has not accepted, search for a client
            if (network_player.isIs_server() && !network_player.isAccepted()) {
                network_player.listenForServerRequest();
            }

            if (!network_player.isYourTurn()) {
                /*  for(JButton b:(JButton[])allButtonsGroup){
                 b.setFocusable(false);
                 }*/
                // this.setEnabled(true);
            }
        }
    }

    public void setNetworkMsgLabelText(String text) {
        networkMsgLabel.setText(text);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton A1;
    private javax.swing.JButton A2;
    private javax.swing.JButton A3;
    private javax.swing.JButton B1;
    private javax.swing.JButton B2;
    private javax.swing.JButton B3;
    private javax.swing.JButton C1;
    private javax.swing.JButton C2;
    private javax.swing.JButton C3;
    private javax.swing.JButton C4;
    private javax.swing.ButtonGroup allButtonsGroup;
    private javax.swing.JButton backButton;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel buttonPanal;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel labelA;
    private javax.swing.JLabel labelB;
    private javax.swing.JLabel nameLabelPlayer1;
    private javax.swing.JLabel nameLabelPlayer2;
    private javax.swing.JLabel networkMsgLabel;
    // End of variables declaration//GEN-END:variables

}
